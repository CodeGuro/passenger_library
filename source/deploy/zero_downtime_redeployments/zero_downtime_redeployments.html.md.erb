---
section: deploy
---
<%
@page_title = "Zero-downtime application updates and restarts for #{language_name} apps - #{integration_mode_name}"
content_for(:sidebar) { render_partial("../sidebar.html", locals: locals) }
%>

<h1>Zero-downtime application updates and restarts<br>
<small>for <%= language_name %> apps on Passenger <%= integration_mode_name_as_passenger_suffix %></small></h1>

Passenger has excellent support for zero-downtime application updates and restarts in its [Enterprise edition](https://www.phusionpassenger.com/enterprise).

Normally, when you instruct Passenger to [restart an application](<%= url_for "/admin/nginx/restart_app.html" %>) after you have deployed an application update, Passenger performs a _blocking restart_. Passenger would shut down all processes for that application and spawn a new one. The spawning of a new application process could take a while, and any requests that come in during this time will be blocked until this first application process has spawned, which users may experience as "downtime".

If your organization follows an agile development methology then you will want to deploy application updates very often. For example, Github was reported to deploy updates six times per day at one point. Deploying updates quickly means that you receive feedback about them more quickly, which aids with the development process. The more often you deploy, the less desirable blocking restarts are.

To solve this problem, Passenger Enterprise provides zero-downtime restarts, also known as "rolling restarts". This mechanism prevents visitors from experiencing any delays when you are restarting your application.

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## How it works

A zero-downtime restart works as follows:

 1. Spawn new process Y
  - Passenger Enterprise spawns a new process Y in the background and waits for it to be ready
 2. Gracefully shutdown old process X
  - Passenger Enterprise stops sending new requests to X and waits until X has handled all of its current requests
  - The shutdown signal is sent to X and Passenger Enterprise waits for X to exit
 3. Replace & repeat
  - X is now gone, Y is added to the pool as its replacement
  - Repeat steps 1-3 until all processes have been replaced  
 
This is a very resource-friendly way of performing a zero-downtime restart, because the memory and spawn load profile remain pretty much the same as during normal server operation. It would be faster to respawn all processes in parallel, but that might result in the deployment suddenly requiring twice as much memory, and the disk & cpu being hit with parallel spawns. This is why we have chosen not to use the parallel approach with Passenger Enterprise, especially since restarts are a vulnerable moment anyway.

### Caveats

Zero-downtime restarts have a few caveats that you should be aware of:

 * Upgrading an application sometimes involves upgrading the database schema. With zero-downtime restarts, there may be a point in time during which processes belonging to the previous version and processes belonging to the new version both exist at the same time. Any database schema upgrades you perform must therefore be backwards-compatible with the old application version.
 * Because there's no telling which process will serve a request, users may not see changes brought about by the new version until all processes have been restarted. It is for this reason that you should not use rolling restarts in development, only in production.
 * If your application takes a long time to shutdown, the entire restart procedure will also take much longer because Passenger needs to wait for each application process in your pool (one-by-one) to stop. Optimizing your application shutdown procedure will make restarts much faster too.

## Enabling zero-downtime restarts

Passenger provides [several ways to restart your application](<%= url_for "/admin/nginx/restart_app.html" %>). Each way has its own mechanism for enabling zero-downtime restarts.

passenger-config restart-app

: If you use `passenger-config restart-app` to restart your application, then pass the `--rolling-restart` command line argument.

restart.txt

: If you use `restart.txt` to restart your application, then enable the
<% if integration_mode_type == :nginx %>
  [passenger_rolling_restarts on](<%= url_for "/config/nginx/reference/index.html" %>#passenger_rolling_restarts) configuration option.
<% elsif integration_mode_type == :apache %>
  [PassengerRollingRestarts on](<%= url_for "/config/apache/reference/index.html" %>#passengerrollingrestarts) configuration option.
<% elsif integration_mode_type == :standalone %>
  [`--rolling-restarts` / "rolling_restarts"](<%= url_for "/config/standalone/reference/index.html" %>#--rolling-restarts-rolling_restarts) configuration option.
<% else %>
  <% raise "TODO" %>
<% end %>

<% if integration_mode_type == :nginx || integration_mode_type == :apache %>
Restarting <%= integration_mode_name %>

: Normally, Passenger restarts all your applications when you restart <%= integration_mode_name %>. If you want to prevent this from happening, please use the [Flying Passenger](<%= url_for "/deploy/#{integration_mode_type}/flying_passenger.html" %>) feature.
<% end %>

<div>
<% if language_type == :ruby %>
  <h3 id="automation">Capistrano</h3>

  <p>
    If you followed the <a href="<%= url_for "/deploy/#{integration_mode_type}/automating_app_updates/#{language_type}/index.html" %>">Automating deployments of application updates</a> guide, and you want to enable zero-downtime restarts in Capistrano, then here's how you can do that.
  </p>

  <p>
    Open <code>config/deploy.rb</code> and ensure that <code>--rolling-restart</code> is set in the <code>passenger_restart_options</code> setting:
  </p>
  <pre class="highlight"><span class="n">set</span> <span class="ss">:passenger_restart_options</span><span class="p">,</span>
  <span class="o">-&gt;</span> <span class="p">{</span> <span class="s2">"</span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2"> --ignore-app-not-running --rolling-restart"</span> <span class="p">}</span></pre>
<% else %>
  <h3 id="automation">Automation scripts</h3>

  <p>
    If you followed the <a href="<%= url_for "/deploy/#{integration_mode_type}/automating_app_updates/#{language_type}/index.html" %>">Automating deployments of application updates</a> guide, and you want to enable zero-downtime restarts there, then here's how you can do that.
  </p>

  <p>
    Open <code>deploy/work.sh</code> and look for this line:
  </p>
  <pre class="highlight">RESTART_ARGS=</pre>
  <p>
    Change it to:
  </p>
  <pre class="highlight">RESTART_ARGS=--rolling-restart</pre>
<% end %>
</div>

## Tracking rolling restart progress

You can track the progress of rolling restarts using [passenger-status](<%= url_for "/admin/#{integration_mode_type}/overall_status_report.html" %>). That tool will tell you which processes are already rolling restarted, which processes haven't been rolling restarted, and which process is currently being rolling restarted.

Here is an example:

<div>
  <pre class="highlight"><span class="prompt">$ </span>sudo passenger-status
<span class="output">Version : 5.0.13
Date    : 2015-07-06 12:18:38 +0200
Instance: bdVuBLEf (nginx/1.8.0 Phusion_Passenger/5.0.13)

----------- General information -----------
Max pool size : 9
App groups    : 1
Processes     : 2
Requests in top-level queue : 0

----------- Application groups -----------
/var/www/phusion_blog/current/public:
  App root: /var/www/phusion_blog/current
  Requests in queue: 0
  * PID: 29843   Sessions: 0       Processed: 1       Uptime: 0h 0m 14s
    CPU: 0%      Memory  : 60M     Last used: 4s ago
  * PID: 18334   Sessions: 0       Processed: 2873    Uptime: 5h 53m 26s
    CPU: 0%      Memory  : 96M     Last used: 29s ago
    Rolling restarting...
  * PID: 18339   Sessions: 0       Processed: 2873    Uptime: 5h 53m 26s
    CPU: 0%      Memory  : 96M     Last used: 29s ago</span></pre>
</div>

The "Rolling restarting..." indicator tells you which process is currently being rolling restarted.

Processes that have already been rolling restarted have a low uptime. In this example, you can see that process 29843 has an uptime of 14 seconds, which is evidence that it has recently been rolling restarted.

Processes that have not yet been rolling restarted have a high uptime. Process 18339 in this example has not yet been rolling restarted.

## Deployment error resistance

A related feature is [deployment error resistance](<%= url_for "/deploy/#{integration_mode_type}/deployment_error_resistance.html" %>). This feature reduces the chance of visitors experiencing any errors in case the deployment of an application update failed. If you use zero-downtime restarts, then we.

## Error handling and troubleshooting

If Passenger Enterprise could not rolling restart a process (let's call it 'A') because it is unable to spawn a new process (let's call it 'B'), then Passenger Enterprise will give up trying to rolling restart that particular process 'A'. What happens next depends on whether [deployment error resistance](<%= url_for "/deploy/#{integration_mode_type}/deployment_error_resistance.html" %>) is enabled:

 * If deployment error resistance is disabled (the default), then Passenger Enterprise will proceed with trying to restart the remaining processes.
 * If deployment error resistance is enabled, the Passenger Enterprise will give up rolling restarting immediately. The application group will be put into Deployment Error Resistance Mode.

In any case, all errors encountered during a rolling restart process are [logged](<%= url_for "/admin/#{integration_mode_type}/log_file/index.html" %>). If you suspect that something is wrong, please read the log file.
