---
section: deploy
---
<%
@page_title = "Deployment error resistance - #{integration_mode_name}"
content_for(:sidebar) { render_partial("sidebar.html", locals: locals) }

case integration_mode_type
when :nginx
  passenger_pool_idle_time_anchor = "passenger_pool_idle_time"
  passenger_memory_limit_anchor = "passenger_memory_limit"
  passenger_resist_deployment_errors_anchor = "passenger_resist_deployment_errors"
when :apache
  passenger_pool_idle_time_anchor = "passengerpoolidletime"
  passenger_memory_limit_anchor = "passengermemorylimit"
  passenger_resist_deployment_errors_anchor = "passengerresistdeploymenterrors"
when :standalone
  # TODO: check this
  passenger_pool_idle_time_anchor = "passenger_pool_idle_time"
  passenger_memory_limit_anchor = "passenger_memory_limit"
  passenger_resist_deployment_errors_anchor = "passenger_resist_deployment_errors"
else
  raise "TODO"
end
%>

<h1>Deployment error resistance<br>
<small>on Passenger <%= integration_mode_name_as_passenger_suffix %></small></h1>

[Passenger Enterprise](https://www.phusionpassenger.com/enterprise) provides a feature called "Deployment error resistance". This feature reduces the chance of visitors experiencing any errors in case the deployment of an application update failed.

Suppose that you have upgraded your application and you have [issued a command to restart it](<%= url_for "/admin/#{integration_mode_type}/restart_app.html" %>), but the application update contains an error (e.g. a syntax error or a database configuration error) that prevents Passenger from successfully spawning a process. Passenger would normally display an error message to the visitor in response to this.

By enabling deployment error resistance, Passenger Enterprise would "freeze" the application's process list. Existing application processes (belonging to the previous version) will be kept around to serve requests. The error is logged, but visitors do not see any error messages. Passenger keeps the old processes around until an administrator has taken action. This way, visitors will suffer minimally from deployment errors.

## How it works

When deployment error resistance is enabled, Passenger Enterprise would perform the following steps whenever it finds that it is unable to start an application process:

 1. It ensures that all requests are routed to existing application processes (that belongs to the previous version of the application). Passenger will not display an error message to the visitor.
 2. It logs the error to [the log file](<%= url_for "/admin/#{integration_mode_type}/log_file/index.html" %>).
 3. It sets an internal flag (Deployment Error Resistance Mode) so that no processes for this application will be spawned (even when the current traffic would normally result in more processes being spawned) and no processes will be [idle cleaned](<%= url_for "/config/#{integration_mode_type}/reference/index.html" %>#<%= passenger_pool_idle_time_anchor %>). Processes *could* still be shutdown because of other events, e.g. because their [memory limit](<%= url_for "/config/#{integration_mode_type}/reference/index.html" %>#<%= passenger_memory_limit_anchor %>) have been reached.

You can check whether Passenger Enterprise has entered Deployment Error Resistance mode by invoking `passenger-status` and checking for the message "Resisting deployment error" then the flag is set.

## Enabling the feature

<% if integration_mode_type == :nginx %>
  Deployment error resistance only works when a rolling restart is performed. So to enable this feature, we recommend that you set [passenger_rolling_restarts on](<%= url_for "/config/nginx/reference/index.html" %>#passenger_rolling_restarts) and [passenger_resist_deployment_errors on](<%= url_for "/config/nginx/reference/index.html" %>#passenger_resist_deployment_errors). Enabling deployment error resistance only works if rolling restarts are also enabled.

  For example, open your Nginx configuration file and set:

  <pre class="highlight">passenger_rolling_restarts on;
passenger_resist_deployment_errors on;</pre>

  Then restart Nginx to activate the change.
<% elsif integration_mode_type == :apache %>
  Deployment error resistance only works when a rolling restart is performed. So to enable this feature, we recommend that you set [PassengerRollingRestarts on](<%= url_for "/config/apache/reference/index.html" %>#passengerrollingrestarts) and [PassengerResistDeploymentErrors on](<%= url_for "/config/apache/reference/index.html" %>#passengerresistdeploymenterrors). Enabling deployment error resistance only works if rolling restarts are also enabled.

  For example, open your Apache configuration file and set:

  <pre class="highlight">PassengerRollingRestarts on
PassengerResistDeploymentErrors on</pre>

  Then restart Apache to activate the change.
<% elsif integration_mode_type == :standalone %>
  Deployment error resistance only works when a rolling restart is performed. So to enable this feature, we recommend that you pass the `--resist-deployment-errors --rolling-restarts` command line option, or that you set `resist_deployment_errors` and `rolling_restarts` to true in [Passengerfile.json](<%= url_for "/config/standalone/intro.html" %>).

<% else %>
  <% raise "TODO" %>
<% end %>

When using `passenger-config restart-app`, be sure to pass `--rolling-restart`.

## Troubleshooting

A common problem is that Passenger Enterprise may appear to erroneously enter deployment error resistance mode. That is, it would enter deployment error resistance mode even when no new application update has been deployed, or when the application hasn't been restarted.

You should know that deployment error resistance mode is entered on *any* application process spawning error. By default, Passenger Enterprise changes the number of processes dynamically based on traffic conditions. If there is a (temporary) traffic spike, then Passenger Enterprise may decide at that moment to spawn another process in order to handle the traffic. If an error occurs at that time, e.g. Passenger Enterprise is unable to spawn the process because of an out-of-memory condition, then Passenger Enterprise will enter deployment error resistance mode.

To solve this problem, you you should find out the exact cause of the spawn error by [checking the log file for error messages](<%= url_for "/admin/#{integration_mode_type}/log_file/index.html" %>). Passenger Enterprise will have logged the error reason. For example, if the error message says that the spawn error is caused by an out-of-memory condition, try increasing the server's RAM or swap.

## Related guides

 * [Configuration reference: PassengerResistDeploymentErrors](<%= url_for "/config/#{integration_mode_type}/reference/index.html" %>#<%= passenger_resist_deployment_errors_anchor %>)
 * [Zero-downtime app updates and restarts](zero_downtime_redeployments/)
