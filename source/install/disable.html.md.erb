---
section: install
---
<%
@page_title = "Disabling Passenger from #{integration_mode_name} without uninstalling it"
content_for(:sidebar) do
  render_partial("sidebar.html", locals: locals.merge(
    limit_choices: { "intmode" => [INTEGRATION_MODE_NGINX, INTEGRATION_MODE_APACHE] }
  ))
end
%>

# Disabling Passenger without uninstalling it

You can temporarily unload (disable) Passenger from <%= integration_mode_name %>, without uninstalling the Passenger files, so that <%= integration_mode_name %> behaves as if Passenger was never installed in the first place. This might be useful to you if -- for example -- you seem to be experiencing a problem caused by Passenger, but you want to make sure whether that's actually the case without having to go through the hassle of uninstalling Passenger completely. When disabled, Passenger will not occupy any memory or CPU or otherwise interfere with <%= integration_mode_name %>.

<% if integration_mode_type == :nginx %>

Edit your Nginx configuration file(s) and comment out all Passenger configuration directives.

For example, if your configuration file looks like this...

~~~nginx
...

http {
    passenger_root /somewhere/passenger-x.x.x;
    passenger_ruby /usr/bin/ruby;
    passenger_max_pool_size 10;

    # If you are using our Debian packages then you may encounter this:
    include /etc/nginx/passenger.conf;

    gzip on;

    server {
        server_name www.foo.com;
        listen 80;
        root /webapps/foo/public;
        passenger_enabled on;
    }
}
~~~

...then comment out the relevant directives, so that it looks like this:

~~~nginx
...

http {
    # passenger_root /somewhere/passenger-x.x.x;
    # passenger_ruby /usr/bin/ruby;
    # passenger_max_pool_size 10;

    # include /etc/nginx/passenger.conf;

    gzip on;

    server {
        server_name www.foo.com;
        listen 80;
        root /webapps/foo/public;
        # passenger_enabled on;
    }
}
~~~

After you've done this, save the configuration file and restart Nginx.

<% else %>

Edit your Apache configuration file(s) and comment out:

- all Passenger configuration directives.
- the `LoadModule passenger_module` directive.

For example, if your configuration file looks like this...

    Listen *:80
    NameVirtualHost *:80

    LoadModule passenger_module /somewhere/passenger-x.x.x/ext/apache2/mod_passenger.so

    PassengerRoot /somewhere/passenger/x.x.x
    PassengerDefaultRuby /usr/bin/ruby
    PassengerMaxPoolSize 10

    <VirtualHost *:80>
        ServerName www.foo.com
        DocumentRoot /webapps/foo/public
        RailsBaseURI /rails
    </VirtualHost>

...then comment out the relevant directives, so that it looks like this:

    Listen *:80
    NameVirtualHost *:80
    ....

    # LoadModule passenger_module /somewhere/passenger-x.x.x/ext/apache2/mod_passenger.so

    # PassengerRoot /somewhere/passenger/x.x.x
    # PassengerDefaultRuby /usr/bin/ruby
    # PassengerMaxPoolSize 10

    <VirtualHost *:80>
        ServerName www.foo.com
        DocumentRoot /webapps/foo/public
        # RailsBaseURI /rails
    </VirtualHost>

After you've done this, save the configuration file and restart Apache.

<% end %>
