---
title: 'Understanding Passenger - Passenger + Meteor basics'
comments: false
---

# Fundamental concepts
<%= render_partial('/shared/current_selection') %>

<p class="lead">We give you a basic understanding of what Passenger is. We also explain how Passenger fits in the stack and how it compares to other software that you may use.</p>

**Table of contents**

<ol class="toc-container"></ol>

## The "application server" concept

Meteor applications are normally responsible for their services from the ground-up. You literally ran the application, which would then import Meteor libraries, setting up a server socket for accepting HTTP requests, etc.

<figure><img src="traditional_meteor.png"></figure>

As an application server, Passenger reverses this relationship. The application server runs the application. Services are provided to the application "for free".

<figure><img src="../node/app_server_concept.png"></figure>

## How Passenger fits in the stack

When you deploy your Meteor app to production, the recommended way involves bundling your Meteor app using `meteor build` or if you are using Meteor 1.3.5.1 or earlier the `meteor bundle` command. This bundle contains your app's code, Meteor's code and various dependencies. The contents of the bundle is a normal [Node.js](https://nodejs.org/) app.

This means that deploying a Meteor app to production is very similar to deploying any other Node.js apps. If you have ever deployed a Node.js app, then you may know that there are all sorts of components involved that handle different aspects of the deployment. You may have heard of PM2, Forever, Nginx and Cluster. These components take care of process supervision, load balancing, multi-core enablement, etc. Passenger replaces some components, while collaborating with other components.

In a typical production stack, one would use Nginx as the web server and Passenger as the application server. Passenger integrates with Nginx and manages the application and its resources.

<figure>
  <img src="../node/passenger_node_architecture.png">
  <figcaption>Passenger integrates with Nginx and manages the app's processes and resources.</figcaption>
</figure>

### A holistic approach

If you have deployed a Node.js app to production before, then you may know that it involves glueing a bunch of different tools together:

 * Nginx as a reverse proxy.
 * Forever/PM2 to keep your app running and to manage your app's processes.
 * An init script to start your app at boot.
 * The Cluster module for multi-core usage.

We dislike having so many moving parts, so Passenger takes more of a holistic approach to the problem. As an application server, Passenger is conceptually like Nginx, Forever/PM2, the init script and the cluster module combined in a single, lightweight, easy-to-use package. Instead needing you to glue different tools together, Passenger takes care of the "gluing together" for you.

The holistic approach saves time and effort.

### Nginx

Nginx is a web server. It provides HTTP transaction handling and serves static files. However, it cannot manage Meteor apps by itself.

It is a good idea to put Meteor behind an Nginx reverse proxy, because Nginx is better than Meteor at handling HTTP requests in a secure manner.

However, connecting Meteor with an Nginx reverse proxy involves redundant work riddled with boilerplate code. Passenger takes care of this automatically and saves you time and effort.

### Vs PM2 and Forever

PM2 and Forever are tools for keeping Meteor apps running. If an app crashes, PM2 and Forever can restart the app.

Passenger replaces PM2 and Forever because Passenger provides their functionality. Where PM2 and Forever have to be setup separately, Passenger provides the functionality builtin, saving time and effort.

Passenger also provides features not found in PM2 and Forever, such as adjusting the number of processes dynamically based on traffic, and better load balancing (see "Vs Cluster module" to learn more about this).

### Vs Cluster module

The Node.js and Meteor Cluster modules are libraries for running Meteor apps in multiple processes and load balancing traffic between them. Running the app in multiple processes allows better multi-core usage, better performance and better fault-tolerance. The Cluster modules may require the developer to write some boilerplate code in order to use them.

Passenger replaces the Cluster module. No boilerplate code is required: Passenger can launch your app in multiple processes and load balance traffic automatically, with no code changes most of the time, aside from the removal of the cluster module boilerplate if you've already added it.

Besides this, the biggest advantage that Passenger provides is that it can load balance WebSockets, Socket.IO and SockJS through the use of sticky sessions. These technologies do not work well with the Node.js Cluster module because the Cluster module's load balancing mechanism is generic (and thus cannot implement sticky sessions), while Passenger's mechanism is specifically written for HTTP.

If you are using Passenger, and we hope you do, then you must not include the Cluster module in your project as it conflicts with Passenger.

## Multiple integration modes

<%= render_partial("../shared/integration_modes", locals: locals.merge(context: :basics)) %>

<%= render_partial("../shared/out_of_scope", locals: locals.merge(deploy_tools: "Git, scp, FTP, Capistrano, Fabric, etc", dependency_tools: "npm or yarn")) %>

##Next step: Quickstart

<a class="dark-button" href="/tutorials/quickstart/node/">Continue</a>
