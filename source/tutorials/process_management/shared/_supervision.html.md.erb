<%
locals[:app_name] ||= "testapp"
%>
The cool thing about Passenger is that it restarts processes that crash! This way you have to worry less about application bugs taking the website down.

Let us try it out by killing the second process, simulating a crash:

<pre class="highlight"><span class="prompt">$ </span>kill 25016</pre>

In our example, the second process's PID is 25016. The PIDs will be different on your machine, so be sure to substitute 25016 with an appropriate value.

Wait 5 seconds, then run `passenger-status`. Notice that process 25016 is gone and that it has been replaced by 25017!

<pre class="highlight"><%= passenger_command_prefix_html(locals, cd: false) %>passenger-status
<span class="output">Version : 5.0.6
Date    : 2015-04-14 21:58:30 +0100
Instance: 25002
----------- General information -----------
Max pool size : 6
Processes     : 2
Requests in top-level queue : 0

----------- Application groups -----------
/Users/phusion/<%= locals[:app_name] %>#default:
  App root: /Users/phusion/<%= locals[:app_name] %>
  Requests in queue: 0
  * PID: 25015   Sessions: 0       Processed: 2       Uptime: 45s
    CPU: 0%      Memory  : 14M     Last used: 45s ago
  * PID: 25017   Sessions: 0       Processed: 0       Uptime: 9s       <span class="label label-info">This is the newly spawned process</span>
    CPU: 0%      Memory  : 14M     Last used: 3s ago</span></pre>

<!-- TODO: add a note that discourages the use of 'kill' in production in favor of 'passenger-config detach-process' -->

<div class="info">
  <p>While a process is being restarted, Passenger will let other processes (if any) process traffic. That way, downtime is minimized in the event of a process crash.</p>
</div>
