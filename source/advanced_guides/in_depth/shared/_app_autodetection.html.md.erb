<% if integration_mode_type == :apache || integration_mode_type == :nginx %>
If you have followed [the deployment instructions](<%= url_for "/advanced_guides/deployment_and_scaling/standalone/index.html" %>) then you may have noticed that in many cases, just by pointing the virtual host root to an application's static assets directory, Passenger is able to automatically infer how to start the application. You may wonder how this works, and how Passenger knows what kind of web application it is (Ruby, Python, Node.js, etc). After all, many other polyglot application servers expect you write configuration in which you specify what kind of application it is. You may also wonder what happens if Passenger is not able to autodetect the application.

**Table of contents**

<ul class="toc-container"><li>Loading...</li></ul>

## Rationale

The reason why Passenger tries to autodetect the application, is because it strives to save you from needless work as much as possible. Passenger follows the "convention over configuration" philosophy. If it can reasonably use sane defaults, it will. Having said that, it still allows you to provide configuration if autodetection fails.

## Autodetection algorithm

Passenger checks whether the virtual host is a Passenger-supported application through a two-step algorithm:

<% if integration_mode_type == :nginx -%>
 1. First, it extracts the directory name from the virtual host root, like this: `dirname(root)`. For example, if you set `root /webapps/foo/public` , then Passenger extracts the `/webapps/foo` portion of it. We call this the "application root".
<% else -%>
 1. First, it extracts the directory name from the virtual host root, like this: `dirname(DocumentRoot)`. For example, if you set `DocumentRoot /webapps/foo/public` , then Passenger extracts the `/webapps/foo` portion of it. We call this the "application root".
<% end -%>
 2. Passenger checks whether one of the following file(s) exist inside the application root in order to autodetect the application type.

    <table class="table table-striped table-bordered">
      <thead>
        <tr>
          <th>File</th>
          <th>Inferred application type</th>
        </tr>
      </thead>
      <tbody>
        <% SUPPORTED_APP_TYPES.each do |spec|
           next unless spec[:lang_key].include? language_type.to_s
         %>
          <tr>
            <td><%= spec[:startup_file] %></td>
            <td><%= spec[:name] %></td>
          </tr>
        <% end -%>
      </tbody>
    </table>

<% if integration_mode_type == :apache %>
### No symlink resolves

Note that Passenger does *not* resolve any symlinks in the DocumentRoot path by default since version 2.2.0. This is in contrast to versions earlier than 2.2.0, which do resolve symlinks.

So for example, suppose that your DocumentRoot points to `/home/www/example.com`, which in turn is a symlink to `/webapps/example.com/public`. In versions earlier than 2.2.0,
Passenger will check whether `/webapps/example.com/config.ru` exists because it resolves all symlinks. Passenger 2.2.0 and later however will check for `/home/www/config.ru`. This file of course doesn't exist, and as a result Passenger will not activate itself for this virtual host, and you'll most likely see an Apache `mod_dirindex` directory listing.

If you need the old symlink-resolving behavior for whatever reason, then you can turn on [PassengerResolveSymlinksInDocumentRoot](<%= url_for("/references/config_reference/apache/") %>#passengerresolvesymlinksindocumentRoot).

Another way to solve this situation is to explicitly tell Passenger what the correct application root is through the [PassengerAppRoot](<%= url_for("/references/config_reference/apache/") %>#passengerapproot) option.
<% end %>

## What happens if autodetection fails

<% if integration_mode_type == :nginx %>
  If Passenger does not detect an application inside the application root, then Passenger will let Nginx serve the virtual host root as if Passenger is not activated. This means that Nginx will serve static files, that that it will display a "404 Not Found" error of some sort on the root URL (because Nginx is not configured to show directory listings by default), but not much else.

  So if you see an Nginx "404 Not Found" response page instead of your application, then it usually means that Passenger failed to autodetect your application. Try overriding the autodetection as documented below.
<% else %>
  If Passenger does not detect an application inside the application root, then Passenger will let Apache serve the virtual host root as if Passenger is not activated. This usually means that the Apache will show a `mod_dirindex` directory listing and that it will serve static files, but not much else.

  So if you see a directory listing instead of your application, then it usually means that Passenger failed to autodetect your application. Try overriding the autodetection as documented below.
<% end %>

## Overriding autodetection

If Passenger's autodetection has failed you, or if your application uses directory structure that does not match Passenger's autodetection defaults, then you can add a few configuration options to tell Passenger how your application looks like. The relevant configuration options are:

<% if integration_mode_type == :nginx %>
 * [passenger_app_root](<%= url_for("/references/config_reference/nginx/") %>#passenger_app_root) -- Tells Passenger where your application root is.
 * [passenger_app_type](<%= url_for("/references/config_reference/nginx/") %>#passenger_app_type) -- Tells Passenger what kind of application it is.
 * [passenger_startup_file](<%= url_for("/references/config_reference/nginx/") %>#passenger_startup_file) -- Tells Passenger where your application's entry point file is.
<% else %>
 * [PassengerAppRoot](<%= url_for("/references/config_reference/apache/") %>#passengerapproot) -- Tells Passenger where your application root is.
 * [PassengerAppType](<%= url_for("/references/config_reference/apache/") %>#passengerapptype) -- Tells Passenger what kind of application it is.
 * [PassengerStartupFile](<%= url_for("/references/config_reference/apache/") %>#passengerstartupfile) -- Tells Passenger where your application's entry point file is.
<% end %>

<div class="info">
  Make sure to select the correct integration in the config reference article mentioned above.
</div>

<% if language_type == :nodejs || language_type == :meteor %>
Suppose that you have a Node.js application whose entry point file is `server.js` instead of `app.js`. Here is an example that shows you how to configure Passenger:

<% if integration_mode_type == :nginx %>
~~~nginx
server {
    server_name example.com;
    root /webapps/example.com/public;
    passenger_enabled on;
    # Use server.js as the startup file (entry point file) for
    # your Node.js application, instead of the default app.js
    passenger_startup_file server.js;
    passenger_app_type node;
}
~~~
<% else %>
~~~
<VirtualHost test.host>
    DocumentRoot /webapps/example.com/public
    # Use server.js as the startup file (entry point file) for
    # your Node.js application, instead of the default app.js
    PassengerStartupFile server.js
    PassengerAppType node
    PassengerAppRoot /webapps/example.com
</VirtualHost>
~~~
<% end %>

<% end %>

<% else %>
If you have follows the [deployment instructions](<%= url_for "/advanced_guides/deployment_and_scaling/standalone/index.html" %>) then you may have noticed that in many cases, just by running `passenger start`, Passenger is able to automatically infer how to start the application and where your static assets are. You may wonder how this works, and how Passenger knows what kind of web application it is (Ruby, Python, Node.js, etc). After all, many other polyglot application servers expect you write configuration in which you specify what kind of application it is. You may also wonder what happens if Passenger is not able to autodetect the application.

**Table of contents**

<ul class="toc-container"><li>Loading...</li></ul>

## Rationale

The reason why Passenger tries to autodetect the application, is because it strives to save you from needless work as much as possible. Passenger follows the "convention over configuration" philosophy. If it can reasonably use sane defaults, it will. Having said that, it still allows you to provide configuration if autodetection fails.

## Autodetection algorithm

Passenger checks whether the application directory is a Passenger-supported application by checking whether one of the following file(s) exist:

<table class="table table-striped table-bordered">
  <thead>
    <tr>
      <th>File</th>
      <th>Inferred application type</th>
    </tr>
  </thead>
  <tbody>
    <% SUPPORTED_APP_TYPES.each do |spec|
       next unless spec[:lang_key].include? language_type.to_s
     %>
      <tr>
        <td><%= spec[:startup_file] %></td>
        <td><%= spec[:name] %></td>
      </tr>
    <% end -%>
  </tbody>
</table>

## What happens if autodetection fails

If Passenger Standalone does not detect an application inside the application directory, then it will try to serve static files. Since Passenger Standalone does not show directory listings, it will display a "404 Not Found" error of some sort on the root URL.

So if you see a "404 Not Found" response page instead of your application, then it usually means that Passenger failed to autodetect your application. Try overriding the autodetection as documented below.

## Overriding autodetection

If Passenger's autodetection has failed you, or if your application uses directory structure that does not match Passenger's autodetection defaults, then you can add a few configuration options to tell Passenger how your application looks like. The relevant configuration options are:

 * [`--app-type` / "app_type"](<%= url_for "/references/config_reference/standalone/" %>#--app-type-app_type) -- Tells Passenger what kind of application it is.
 * [`--startup-file` / "startup_file"](<%= url_for "/references/config_reference/standalone/" %>#--startup-file-startup_file) -- Tells Passenger where your application's entry point file is.

<div class="info">
  Make sure to select the correct integration in the config reference article mentioned above.
</div>

Suppose that you have a Node.js application whose entry point file is `server.js` instead of `app.js`. Here is an example that shows you how to configure Passenger:

~~~
passenger start --app-type node --startup-file server.js
~~~

### Static assets

Passenger Standalone automatically serves static assets from the `public` directory in the application directory. This can be overridden with the [`--static-files-dir` / "static_files_dir"](<%= url_for "/references/config_reference/standalone/" %>#--static-files-dir-static_files_dir) option.

<% end %>

<div class="back-button">
  <a class="dark-button" href="<%= url_for "/advanced_guides/in_depth/index.html" %>">Back</a>
</div>
