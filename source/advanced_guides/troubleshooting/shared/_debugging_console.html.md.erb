<% if language_type == :ruby %>
<h1>Ruby debugging console</h1>

If you use [Passenger Enterprise](https://www.phusionpassenger.com/enterprise) then you have can use various debugging consoles to debug your application.

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## IRB console (Ruby REPL console)

You can attach an IRB console to any application process and inspect its state by executing arbitrary Ruby code. This works even in production environments. There is no flag to turn on. There is no performance impact, other than (obviously) the performance impact of any code you run inside the console.

First, lookup the PID of the application you want to attach to, using [passenger-status](<%= url_for "/admin/#{integration_mode_type}/overall_status_report.html" %>).

Next, attach an IRB console to the desired process by running the `passenger-irb` command with the process's PID as argument. For example:

<pre class="highlight"><span class="prompt">$ </span>passenger-irb 28373</pre>

Inside this IRB console, you can execute arbitrary Ruby code in the context of the application process. `passenger-irb` will print the result of the evaluation. For example:

<pre class="highlight"><span class="prompt">$ </span>passenger-irb
<span class="output">*** Attaching to process 28373: /var/www/passenger_status_service/current/public
Attached. You can now evaluate any arbitrary Ruby code in this process. Type 'help' for useful commands.</span>
&gt;&gt; 1 + 2
<span class="output">=&gt; 3</span>
&gt;&gt;</pre>

`passenger-irb` also provides some useful helper methods. To obtain a list of all helper methods, run `help`. For example, the `backtraces` helper method displays the backtraces of all threads:

<pre class="highlight"><span class="prompt">&gt;&gt; </span>backtraces
<span class="output">========== Process 28373: backtrace dump ==========
------------------------------------------------------------
# Thread: #&lt;Thread:0x00000000bbb3b8 sleep&gt;(Main thread), [main thread], alive = true
------------------------------------------------------------
    /opt/passenger-enterprise/lib/phusion_passenger/request_handler.rb:506:in `select'
    /opt/passenger-enterprise/lib/phusion_passenger/request_handler.rb:506:in `wait_until_termination_requested'
    /opt/passenger-enterprise/lib/phusion_passenger/request_handler.rb:224:in `main_loop'
    /opt/passenger-enterprise/helper-scripts/rack-loader.rb:112:in `&lt;module:App&gt;'
    /opt/passenger-enterprise/helper-scripts/rack-loader.rb:11:in `&lt;module:PhusionPassenger&gt;'
    /opt/passenger-enterprise/helper-scripts/rack-loader.rb:10:in `&lt;main&gt;'
...</span>
&gt;&gt;</pre>

## Ruby debugger console

Besides the IRB console, you can also attach a debugger console based on the `ruby-debug`, `debugger` or `byebug` gem. These gems are for Ruby 1.8, 1.9 and 2.0+, respectively.

Before you can use the Ruby debugger console, you must have the appropriate gem installed. If you're using Bundler, you should add this to your application's Gemfile:

~~~ruby
gem 'ruby-debug', :platforms => :ruby_18
gem 'debugger', :platforms => :ruby_19
gem 'byebug', :platforms => :ruby_20
~~~

<% if integration_mode_type == :nginx %>
  Next, you must enable the [passenger_debugger](<%= url_for "/config/nginx/reference/index.html" %>#passenger_debugger) configuration option:

  <pre class="highlight">passenger_debugger on;</pre>
<% elsif integration_mode_type == :apache %>
  Next, you must enable the [PassengerDebugger](<%= url_for "/config/nginx/reference/index.html" %>#passengerdebugger) configuration option:

  <pre class="highlight">PassengerDebugger on</pre>
<% elsif integration_mode_type == :standalone %>
  Next, you must enable the [`--debugger` / "debugger"](<%= url_for "/config/standalone/reference/index.html" %>#--debugger-debugger) configuration option:

  <pre class="highlight">{
  "debugger": true
}</pre>
<% else %>
  <% raise "TODO" %>
<% end %>

Note that this option has a performance impact, so you should not turn it on unless you really need the debugger console.

Finally, attach the Ruby debugger console to the application process you desire with the `passenger-irb --debug <PID>` command, like this:

    passenger-irb --debug 28373

<% end %>

<% if language_type == :nodejs %>
<h1>Node.js debugging</h1>

Passenger is compatible with Node.js debugging tools such as [the builtin Node.js debugger](https://nodejs.org/api/debugger.html) and [node-inspector](https://github.com/node-inspector/node-inspector).

The builtin Node.js debugger is a simple terminal-based debugger that accepts terminal commands, while node-inspector is a GUI based on the Blink Developer Tools. This tutorial teaches you how to use those tools with Passenger.

The idea is that you start a Node.js app with a debugging port enabled. You then attach the debugger interface to the debugging port.

<figure><img src="<%= url_for "/admin/node-inspector.png" %>" class="img-thumbnail"><figcaption>Node-inspector in action</figcaption></figure>

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## Step 1: write a Node.js debugging wrapper script

The goal of this step is to ensure that Passenger starts Node.js application processes with the correct debugging parameters. This is achieved by making a wrapper script.

Create a file `/usr/local/bin/node-passenger-debug-wrapper` containing:

    #!/bin/sh

    # Tells Node.js to open a debugging port on 7500.
    # Feel free to change the number to anything you like.
    exec /path-to-nodejs-or-iojs-binary --debug=7500 "$@"

Make sure this wrapper script is executable:

    sudo chmod +x /usr/local/bin/node-passenger-debug-wrapper

## Step 2: configuring Passenger

You must configure Passenger to do two things:

 1. Ensure that Passenger uses the wrapper script to start Node.js apps.
 2. Ensure that Passenger only starts 1 process for your application. It is currently not possible to debug apps that have multiple processes.

<% if integration_mode_type == :nginx %>
Nginx configuration:

~~~nginx
# Use debug wrapper script.
passenger_nodejs /usr/local/bin/node-passenger-debug-wrapper;
# Ensure that min_instances is set to 1, not a higher number.
passenger_min_instances 1;
~~~

Restart Nginx to have the change applied.
<% elsif integration_mode_type == :apache %>
Apache configuration:

<pre class="highlight"><span class="c"># Use debug wrapper script.</span>
PassengerNodejs /usr/local/bin/node-passenger-debug-wrapper
<span class="c"># Ensure that MinInstances is set to 1, not a higher number.</span>
PassengerMinInstances 1</pre>

Restart Apache to have the change applied.
<% elsif integration_mode_type == :standalone %>
Here is an example Passenger Standalone invocation:

    passenger start \
      --nodejs /usr/local/bin/node-passenger-debug-wrapper \
      --min-instances 1 \
      --app-type node \
      --startup-file app.js
<% else %>
  <% raise "TODO" %>
<% end %>

## Step 3: start app, attach the debugger

<% if integration_mode_type == :nginx || integration_mode_type == :apache %>
Make a request to your app so that Passenger starts it:

<pre class="highlight"><span class="prompt">$ </span>curl http://www.yourapp.com/</pre>
<% end %>

You can now attach a debugger interface to your app.

### Node.js builtin debugger

To use the Node.js builtin debugger, run `node debug localhost:7500`. It will drop you in a debugging prompt:

<pre class="highlight"><span class="prompt">$ </span>node debug localhost:7500
<span class="o">connecting to localhost:7500 ... ok
debug&gt;</span></pre>

At this point, you cannot debug the application yet. The app must be paused at a point where it is executing Javascript. So instruct the debugger to pause the app using the `pause` command.

    debug> pause

When you have executed this command, two things can happen. The first thing is that you immediately see the source line where the app is paused at, like this:

    break in net.js:1301
     1299 };
     1300
    >1301 function onconnection(err, clientHandle) {
     1302   var handle = this;
     1303   var self = handle.owner;

The second thing that may happen is that the `pause` command doesn't appear to have any effect. This can happen if the app is currently waiting for an I/O event instead of executing Javascript. In this case, you must wake the app up by making a request to it:

<pre class="highlight"><span class="prompt">$ </span>curl http://www.yourapp.com/</pre>

If you go back to the debugger, you should see that it has paused the app at a Javascript source line.

### Node-inspector

Install node-inspector if you haven't already:

<pre class="highlight"><span class="prompt">$ </span>npm install -g node-inspector</pre>

Then start node-inspector, telling it where the app's debugging port lies:

<pre class="highlight"><span class="prompt">$ </span>node-inspector --debug-port 7500
<span class="c">Node Inspector v0.10.1
Visit http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&amp;port=7500 to start debugging.</span></pre>

Visit the URL that node-inspector tells you to visit. You should see the debugging interface.

## Conclusion

Debugging Node.js apps on Passenger requires just a few config options. For future versions, we are looking into introducing features that make invoking debuggers even easier.
<% end %>

<div class="back-button">
  <a class="dark-button" href="<%= url_for "/advanced_guides/troubleshooting/index.html" %>">Back</a>
</div>
