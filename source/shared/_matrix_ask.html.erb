<div><!-- Put everything in a container div so that when included from a Markdown file, the Markdown parser won't try to render our content. -->
<%
# This is a generic selector, to be included from ask_xxx partials that contain a structure in locals[:ask_data] of choices,
# links, icons, etc. to present). Additionally, locals[:dest] should contain the url to forward to.
#
data = locals[:ask_data]

# Optionals
# A destination url like /install/:intmode:/, whereby the :intmode: would be filled with the choice
dest_from_locals = locals.has_key?(:dest) ? locals[:dest] : ""
# True ignores choices from localStore and asks anyway
force_choice = locals.has_key?(:force_choice) ? locals[:force_choice] : false
# { key => [choice1, choice2] }: limits the selector of type key to choice1, choice2
limit_choices = locals.has_key?(:limit_choices) ? locals[:limit_choices] : {}

# Because this partial can be included multiple times (with different choices) in the same page.
globals[:ask_matrix_next_id] ||= 0
uuid_partial = globals[:ask_matrix_next_id].to_s
globals[:ask_matrix_next_id] += 1
forward_button_id = "continue_" + uuid_partial
choicerow_div_base_id = "choicerow_" + uuid_partial + "_"
choice_map = "choiceMap_" + uuid_partial
%>

<script>
var <%= choice_map %> = {};
if (typeof knownChoices !== 'undefined') {
  <%= choice_map %> = knownChoices;
}
</script>

<% content_for :head do # this doesn't work for the sidebar, but that shouldn't redirect anyway %>
<script type="text/javascript">

  // This script part executes a quick redirect if all choices are known. If choices are partially known, then the known
  // ones will be hidden through additional scripting further on.
  function getUrlVar(key) {
    var result = new RegExp(key + "=([^&]*)", "i").exec(window.location.search);
    return result && unescape(result[1]) || "";
  }

  function getDestWithAnchor(dest) {
    anchorParm = getUrlVar("a"); // destination anchors can be passed through the "a" URL param
    if (anchorParm) {
      dest += "#" + anchorParm;
    }
    return dest;
  }

  function getParamValue(params, paramKey) {
    if (params) {
      for (var i=0; i<params.length; i++) {
        var tmp = params[i].split("=");
        if (tmp[0] === paramKey) {
          return tmp[1];
        }
      };
    } else {
      return null;
    }
  }

  function overrideParamStoreIfValid(urlParams, storeKey, validChoices) {
    var paramValue = getParamValue(urlParams, storeKey);
    for (var i=0; i<validChoices.length; i++) {
      if (paramValue === validChoices[i]) {
        if (window.localStorage) {
          try {
            window.localStorage.setItem(storeKey, paramValue);
          } catch (err) {
            // Safari in Private Browsing mode throws exceptions
            // on localStorage.setItem(). Ignore and log these
            // exceptions.
            if (window.console) {
              console.error(err);
            }
          }
        }
      }
    }
  }

  destFromLocals = getDestWithAnchor("<%= dest_from_locals %>");

  var knownChoices = {};

  // Allow choice override through URL params (validation needed to prevent arbitrary redirects).
  var urlParams = location.search.substr(1).split("&");

<% data.each do |choicerow| %>
  var <%= choicerow[:store_key] %>_valid_choices = [ 
    <% choicerow[:choices].each_with_index do |choice, index| %><% if !is_choice_filtered?(choice, limit_choices[choicerow[:uri_key]]) %><% if index > 0 %>,<% end %>"<%= choice[:val] %>"<% end %><% end %>
    ];

  overrideParamStoreIfValid(urlParams, "<%= choicerow[:store_key] %>", <%= choicerow[:store_key] %>_valid_choices);
<% end %>

  if (<%= dest_from_locals.length > 0 %> && window.localStorage && !<%= force_choice %>) {
    intModeSel = destFromLocals.indexOf(":intmode:") >= 0;
    intModeStore = window.localStorage.getItem('library_integration_mode');
    if (intModeStore) {
      if (<%= limit_choices["intmode"].nil? %> || <%= get_choices_as_jsarray(limit_choices["intmode"]) %>.indexOf(langStore) >= 0) {
        intModeSel = false;
        destFromLocals = destFromLocals.replace(":intmode:", intModeStore);
        knownChoices["intmode"] = intModeStore;
      }
    }

    langSel = destFromLocals.indexOf(":lang:") >= 0;
    langStore = window.localStorage.getItem('programming_language');
    if (langStore) {
      if (<%= limit_choices["lang"].nil? %> || <%= get_choices_as_jsarray(limit_choices["lang"]) %>.indexOf(langStore) >= 0) {
        langSel = false;
        destFromLocals = destFromLocals.replace(":lang:", langStore);
        knownChoices["lang"] = langStore;
      }
    }

    editionSel = destFromLocals.indexOf(":edition:") >= 0;
    editionStore = window.localStorage.getItem('product_edition');
    if (editionStore) {
      if (<%= limit_choices["edition"].nil? %> || <%= get_choices_as_jsarray(limit_choices["edition"]) %>.indexOf(langStore) >= 0) {
        editionSel = false;
        destFromLocals = destFromLocals.replace(":edition:", editionStore);
        knownChoices["edition"] = editionStore;
      }
    }

    if (!intModeSel && !langSel && !editionSel) {
      <% # dest is already filled in, or could be satisfied from local storage %>
      window.location.replace(destFromLocals);
    }
  }
</script>
<% end %>

<% data.each do |choicerow| %>
<div id="<%= choicerow_div_base_id + choicerow[:uri_key] %>" class="icon-selection-row-container icon-selection-row-container-tabs">
  <div class="icon-selection-row-intro icon-selection-row-intro-small">
    <p class="lead">Please select the relevant <%= choicerow[:header] %>.</p>
    <p>
<% choicerow[:header_links].each_with_index do |header, hdridx| %>
      <%= " &middot; " if hdridx > 0 %><a href="<%= header[:href] %>"><%= header[:desc] %></a>
<% end %>
    </p>
  </div>

  <div class="icon-selection-row-items" role="tablist">

<% choicerow[:choices].each do |choice| %>

<% if is_choice_filtered?(choice, limit_choices[choicerow[:uri_key]]) %>
    <a href="#" class="icon-selection-row-item icon-selection-row-icon-disable">
<% else %>
    <a href="#<%= choice[:val] %>_choices" aria-controls="<%= choice[:val] %>_choices" data-toggle="tab" class="icon-selection-row-item <%= choice[:val] %>"
       onclick="applyChoice(<%= choice_map %>, '<%= choicerow[:store_key] %>', '<%= choicerow[:uri_key] %>', '<%= choice[:val] %>', '<%= forward_button_id %>', getDestWithAnchor('<%= dest_from_locals %>'));">
<% end %>

      <img src="<%= choice[:img] %>" width="<%= choice[:w] %>" height="<%= choice[:h] %>" alt="<%= choice[:alt] %>">
      <span class="icon-selection-row-item-label"><%= choice[:alt] %></span>
    </a>
<% end %>

  </div>
</div>

<% if !force_choice && dest_from_locals.length > 0 %>
<script type="text/javascript">
// Hide options that are already known.
if (destFromLocals.indexOf(':<%= choicerow[:uri_key] %>:') < 0) {
  document.getElementById('<%= choicerow_div_base_id + choicerow[:uri_key] %>').style.display = "none";
}
</script>
<% end %>

<% end %>

<div style="width: 100%; text-align: center; margin-left: auto; margin-right:auto">
  <p><a id="<%= forward_button_id %>" href="" class="btn btn-primary btn-lg disabled">Continue &raquo;</a></p>
</div>
<% if !dest_from_locals.empty? # multiply out all choices for crawler discovery
  def recurseChoices(links, data, rowIdx, curLink, curId, limit_choices)
    if (rowIdx == data.length)
      links << { id: curId, href: curLink }
      return
    end

    data[rowIdx][:choices].each do |choice|
      next if is_choice_filtered?(choice, limit_choices[data[rowIdx][:uri_key]])
      passLink = curLink.gsub(':' + data[rowIdx][:uri_key] + ':', choice[:val])
      recurseChoices(links, data, rowIdx + 1, passLink, curId + choice[:val], limit_choices)
    end
  end

  links = []
  recurseChoices(links, data, 0, dest_from_locals, "", limit_choices)

  links.each do |link| %>
    <p><a href="<%= link[:href] %>" style="display:none" class="btn btn-primary btn-lg">Continue &raquo;</a></p>
  <% end %>
<% end %>

</div><!-- End container div for Markdown safety -->
