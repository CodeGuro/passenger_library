---
title: 'Process management - Passenger + Meteor basics'
section: basics
subsection: process_management
sidebar: toc.html
---
<%
locals[:language_type] = :meteor
locals[:language_name] = "Meteor"
%>

# Process management

<p class="lead">Passenger manages multiple processes in order to maximize stability and performance. Learn how Passenger manages processes and learn about Passenger's process management tools.</p>

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## Introduction

<%= render_partial("../shared/process_management/intro.md", locals: locals) %>

## Working with a single process

<%= render_partial("../shared/process_management/single_process.md", locals: locals) %>

### Stopping the server

Before continuing with this tutorial, stop the server by pressing Ctrl-C:

<pre class="highlight"><span class="prompt">$ </span>passenger start
<span class="output">...
(press Ctrl-C here)
Stopping web server... done!</span></pre>

## Working with multiple processes

### Preparations

Now it is time to get you familiar with running multiple processes. But first, we need to do some preparations. Passenger's multi-process feature is only compatible with **packaged** Meteor apps, not with regular development-mode Meteor apps. Luckily, we had already prepared a packaged sample app in [Preparing a sample app](preparing_sample_app.html). We will use that now.

#### Packaged sample app

Enter the packaged sample app's directory:

<pre class="highlight"><span class="prompt">$ </span>cd ~/leaderboard-packaged/bundle</pre>

Create a `Passengerfile.json` in this directory that tells Passenger how to start this app. Put this text in that file:

~~~json
{
  "app_type": "node",
  "startup_file": "main.js"
}
~~~

#### MongoDB

When you run a Meteor app in development mode using `meteor run`, Meteor takes care of running the MongoDB database server for you. But a packaged Meteor app doesn't run MongoDB for you. Instead, it expects that you already have MongoDB running, and that you tell the app where that MongoDB instance is.

Install MongoDB: <a href="http://www.mongodb.org/" target="_blank">www.mongodb.org</a>.

Run a MongoDB instance (it will run on port 27017 by default):

<pre class="highlight"><span class="prompt">$ </span>mkdir -p data log
<span class="prompt">$ </span>mongod --dbpath data --logpath log/mongod.log --fork</pre>

Verify that MongoDB is up:

<pre class="highlight"><span class="prompt">$ </span>mongo &lt;&lt;&lt;<span class="s">'db.version()'</span>
<span class="output">MongoDB shell version: 2.4.1
connecting to: test
2.4.1
bye</span></pre>

(If you get an error, look in log/mongod.log to learn what went wrong.)

#### Environment variables

Finally, we need to set some environment variables that tell the app what its parameters are.

<pre class="highlight"><span class="prompt">$ </span>export MONGO_URL=mongodb://127.0.0.1:27017/passenger
<span class="prompt">$ </span>export ROOT_URL=http://0.0.0.0:3000/</pre>

 * `MONGO_URL` tells the app where our MongoDB server is.
 * `ROOT_URL` tells the app what its root URL is.

### Seeing multiple processes in action

The easiest way to see Passenger handling multiple processes is by passing `--min-instances 2 --sticky-sessions`.

 * `--min-instances 2` tells Passenger to keep at least 2 processes around. The default value for this option is 1, which is why in the previous step you only saw 1 process.
 * `--sticky-sessions` tells Passenger to use so "sticky routing", which is necessary to make long polling in Meteor work over multiple processes. The details are a bit boring, but you can [read about them](<%= url_for "/config/nginx/reference/index.html" %>#passenger_sticky_sessions) if you want to. For now, just remember to always use `--sticky-sessions` if you have more than 1 process, otherwise bad things will happen.

Run Passenger:

<pre class="highlight"><span class="prompt">$ </span>passenger start --min-instances 2 --sticky-sessions</pre>

Switch to the second terminal again and run `passenger-status` again:

<pre class="highlight"><span class="prompt">$ </span>passenger-status
<span class="output">Version : 5.0.6
Date    : 2015-04-14 21:57:30 +0100
Instance: 25002
----------- General information -----------
Max pool size : 6
Processes     : 2
Requests in top-level queue : 0

----------- Application groups -----------
/Users/phusion/leaderboard-packaged/bundle#default:
  App root: /Users/phusion/leaderboard-packaged/bundle
  Requests in queue: 0
  * PID: 25015   Sessions: 0       Processed: 2       Uptime: 9s
    CPU: 0%      Memory  : 14M     Last used: 3s ago
  * PID: 25016   Sessions: 0       Processed: 0       Uptime: 9s
    CPU: 0%      Memory  : 14M     Last used: 3s ago</span></pre>

As you can see, there are now two processes, namely PID 25015 and 25016.

### Processes are supervised

<%= render_partial("../shared/process_management/supervision.md", locals: locals.merge(app_name: "leaderboard-package/bundle")) %>

### Traffic is load balanced

<%= render_partial("../shared/process_management/load_balance.md", locals: locals.merge(app_name: "leaderboard-package/bundle")) %>

### Processes are dynamically scaled

<%= render_partial("../shared/process_management/process_scaling.md", locals: locals.merge(app_name: "leaderboard-package/bundle")) %>

## Next step

Congratulations, you have almost reached the conclusion of this basics tutorial. Next, we will teach you how to get help in case you need it.

<a href="help.html" class="btn btn-primary btn-lg">Continue &raquo;</a>
