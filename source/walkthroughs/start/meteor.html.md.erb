---
title: 'Quickstart: Meteor + Phusion Passenger'
section: start
sidebar: sidebar.html
---
<%
locals.merge!(LANG_METEOR)
globals.merge!(LANG_METEOR)
%>
# Quickstart: Meteor + Phusion Passenger

<p class="lead">This 5 minute tutorial teaches you to start your application in a Phusion Passenger server, in development mode. Feel what Passenger is and how it works.</p>

<small>Are you looking to deploy your app to production with Passenger, maybe in combination with Nginx or Apache? Take a look at the <a href="<%= url_for "/walkthroughs/deploy/meteor/index.html" %>">deployment tutorial</a>.</small>

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## What is Passenger?

<%= render_partial("_what_is_passenger.md", locals: { language_type: :meteor }) %>

## Install Passenger

<%= render_partial("_install.html") %>

## Preparing the example application

In this tutorial we will use an example Meteor application. The builtin Meteor leaderboard example is a good one.

<pre class="highlight"><span class="prompt">$ </span>cd ~
<span class="prompt">$ </span>meteor create --example leaderboard
<span class="prompt">$ </span>cd leaderboard</pre>

## Running the server

You normally run your app like this when in development mode, right?

<pre class="highlight"><span class="prompt">$ </span>meteor run</pre>

It's similar with Passenger. Instead of `meteor run`, you run your app with `passenger start`:

<pre class="highlight"><span class="prompt">$ </span>passenger start
<span class="output">======= Phusion Passenger Standalone web server started =======
PID file: /Users/phusion/leaderboard/passenger.3000.pid
Log file: /Users/phusion/leaderboard/passenger.3000.log
Environment: development
Accessible via: http://0.0.0.0:3000/    <span class="label label-info">1</span>

You can stop Phusion Passenger Standalone by pressing Ctrl-C.
===============================================================
App 85125 stdout: [[[[[ ~/leaderboard ]]]]]   <span class="label label-info">2</span>
App 85125 stdout:
App 85125 stdout: => Started proxy.
App 85125 stdout: => Started MongoDB.
App 85125 stdout: => Started your app.
App 85125 stdout:
App 85125 stdout: => App running at: http://localhost:9822/  <span class="label label-info">3</span></span></pre>

We see a couple of things here:

 1. Passenger reports that it has started a server, which is accessible via http://0.0.0.0:3000/. It also tells you where it has placed its PID file and log file.
 2. Internally, Passenger runs your Meteor app by invoking the command `meteor run`. You can see the output of that command in the lines that are marked with "App xxx stdout". The xxx is the PID of the `meteor run` command.
 3. `meteor run` starts its own server at http://localhost:9822/. But that is not the URL you should visit. Passenger listens on its own port, manages Meteor, and forwards requests to Meteor through the address http://localhost:9822/. So you should **ignore this line**.

So Passenger is now serving your app on [http://0.0.0.0:3000/](http://0.0.0.0:3000/). If you go to that URL, you will should see your application:

<pre class="highlight"><span class="prompt">$ </span>curl http://0.0.0.0:3000/
<span class="output">...your app's front page HTML...</span></pre>

## Stopping the server

If you stop Passenger, Passenger will stop your Meteor app.

There are two ways to stop the server. The first is by pressing Ctrl-C in the terminal.

<pre class="highlight"><span class="prompt">$ </span>passenger start
<span class="output">...
(press Ctrl-C here)
Stopping web server... done!</span></pre>

The second way is by starting a seperate terminal, changing the working directory to your application, and running `passenger stop`:

<pre class="highlight"><span class="prompt">$ </span>cd /path-to-your-app
<span class="prompt">$ </span>passenger stop</pre>

## Conclusion

Congratulations! Now that you've passed this tutorial and seen Passenger in action, you may be interested in follow-up tutorials.

<%= render_partial("next_step.html", locals: { language_type: :meteor }) %>
